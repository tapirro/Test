<?php


/**
 * This class defines the structure of the 'usr' table.
 *
 *
 * This class was autogenerated by Propel 1.4.0-dev on:
 *
 * Wed Mar 31 16:35:32 2010
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class UsrTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.UsrTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('usr');
		$this->setPhpName('Usr');
		$this->setClassname('Usr');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		$this->setPrimaryKeyMethodInfo('usr_seq');
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addColumn('PASS', 'Pass', 'VARCHAR', false, 128, null);
		$this->addColumn('LOGIN', 'Login', 'VARCHAR', false, 64, null);
		$this->addColumn('EMAIL', 'Email', 'VARCHAR', false, 64, null);
		$this->addForeignKey('UPIC', 'Upic', 'INTEGER', 'sys_pic', 'ID', false, null, null);
		$this->addColumn('RANK', 'Rank', 'INTEGER', false, null, null);
		$this->addColumn('BALANCE', 'Balance', 'DOUBLE', false, null, null);
		$this->addColumn('BOT', 'Bot', 'BOOLEAN', false, null, null);
		$this->addColumn('HIDDEN', 'Hidden', 'BOOLEAN', false, null, null);
		$this->addColumn('COLOR', 'Color', 'VARCHAR', false, 6, null);
		$this->addColumn('DATE_BIRTH', 'DateBirth', 'TIMESTAMP', false, null, null);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('SysPic', 'SysPic', RelationMap::MANY_TO_ONE, array('upic' => 'id', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Blog', 'Blog', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('BlogComment', 'BlogComment', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Permission', 'Permission', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('PictureRelatedByUserid', 'Picture', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('PictureRelatedByOwner', 'Picture', RelationMap::ONE_TO_MANY, array('id' => 'owner', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('PictureComment', 'PictureComment', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Test', 'Test', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Post', 'Post', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('TaskRelatedByUserid', 'Task', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('TaskRelatedByAuthorid', 'Task', RelationMap::ONE_TO_MANY, array('id' => 'authorid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('TaskComment', 'TaskComment', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('PostComment', 'PostComment', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Rank', 'Rank', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('Statmsg', 'Statmsg', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('UsrCommentRelatedByUserid', 'UsrComment', RelationMap::ONE_TO_MANY, array('id' => 'userid', ), 'RESTRICT', 'RESTRICT');
    $this->addRelation('UsrCommentRelatedByUser2', 'UsrComment', RelationMap::ONE_TO_MANY, array('id' => 'user2', ), 'RESTRICT', 'RESTRICT');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // UsrTableMap
